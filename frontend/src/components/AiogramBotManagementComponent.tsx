import React, { useState, useEffect } from 'react';

interface AiogramBotManagementComponentProps {
  userAgentId: number;
  agentId: number;
}

interface AiogramBotStatus {
  bot_token: string;
  is_active: boolean;
  monitored_chats_count: number;
  chat_ids: string[];
}

const AiogramBotManagementComponent: React.FC<AiogramBotManagementComponentProps> = ({ 
  userAgentId, 
  agentId 
}) => {
  const [botStatus, setBotStatus] = useState<AiogramBotStatus | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  useEffect(() => {
    loadBotStatus();
  }, [agentId]);

  const loadBotStatus = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/v1/user/agents/${agentId}/aiogram-bot/status`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setBotStatus(data);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ aiogram –±–æ—Ç–∞');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ aiogram –±–æ—Ç–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ aiogram –±–æ—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const restartBot = async () => {
    try {
      setActionLoading('restart');
      setError(null);
      setSuccess(null);
      
      const response = await fetch(`/api/v1/user/agents/${agentId}/aiogram-bot/restart`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setSuccess(data.message || '–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      } else {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ aiogram –±–æ—Ç–∞');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ aiogram –±–æ—Ç–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ aiogram –±–æ—Ç–∞');
    } finally {
      setActionLoading(null);
    }
  };

  if (loading) {
    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ aiogram –±–æ—Ç–∞...</p>
      </div>
    );
  }

  return (
    <div style={{ 
      marginTop: '20px', 
      padding: '20px', 
      border: '1px solid #e2e8f0', 
      borderRadius: '8px', 
      background: '#fff' 
    }}>
      <h3 style={{ color: '#2d3748', marginBottom: '20px' }}>
        <span role="img" aria-label="robot">ü§ñ</span> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Aiogram –±–æ—Ç–æ–º
      </h3>

      {error && (
        <div style={{ 
          padding: '10px', 
          background: '#fed7d7', 
          color: '#c53030', 
          borderRadius: '6px', 
          marginBottom: '15px' 
        }}>
          {error}
        </div>
      )}

      {success && (
        <div style={{ 
          padding: '10px', 
          background: '#c6f6d5', 
          color: '#2f855a', 
          borderRadius: '6px', 
          marginBottom: '15px' 
        }}>
          {success}
        </div>
      )}

      {botStatus && (
        <div style={{ marginBottom: '20px' }}>
          <div style={{ 
            padding: '15px', 
            background: botStatus.is_active ? '#f0fff4' : '#fef5e7', 
            border: `1px solid ${botStatus.is_active ? '#9ae6b4' : '#fbd38d'}`, 
            borderRadius: '6px',
            marginBottom: '15px'
          }}>
            <h4 style={{ margin: '0 0 10px 0', color: '#2d3748' }}>
              –°—Ç–∞—Ç—É—Å aiogram –±–æ—Ç–∞: {botStatus.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            </h4>
            
            <p style={{ margin: '5px 0', fontSize: '14px', color: '#4a5568' }}>
              <strong>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</strong> {botStatus.bot_token}
            </p>
            
            <p style={{ margin: '5px 0', fontSize: '14px', color: '#4a5568' }}>
              <strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤:</strong> {botStatus.monitored_chats_count}
            </p>
            
            {botStatus.chat_ids.length > 0 && (
              <p style={{ margin: '5px 0', fontSize: '14px', color: '#4a5568' }}>
                <strong>ID —á–∞—Ç–æ–≤:</strong> {botStatus.chat_ids.join(', ')}
              </p>
            )}
          </div>

          <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
            <button
              onClick={restartBot}
              disabled={actionLoading === 'restart'}
              style={{
                background: actionLoading === 'restart' ? '#cbd5e0' : '#3182ce',
                color: '#fff',
                border: 'none',
                borderRadius: '6px',
                padding: '10px 20px',
                fontSize: '14px',
                cursor: actionLoading === 'restart' ? 'not-allowed' : 'pointer',
                transition: 'background 0.2s'
              }}
            >
              {actionLoading === 'restart' ? '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...' : 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'}
            </button>

            <button
              onClick={loadBotStatus}
              disabled={loading}
              style={{
                background: loading ? '#cbd5e0' : '#4a5568',
                color: '#fff',
                border: 'none',
                borderRadius: '6px',
                padding: '10px 20px',
                fontSize: '14px',
                cursor: loading ? 'not-allowed' : 'pointer',
                transition: 'background 0.2s'
              }}
            >
              {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}
            </button>
          </div>
        </div>
      )}

      <div style={{ 
        padding: '15px', 
        background: '#f7fafc', 
        borderRadius: '6px',
        fontSize: '14px',
        color: '#4a5568'
      }}>
        <h4 style={{ margin: '0 0 10px 0', color: '#2d3748' }}>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç aiogram –±–æ—Ç:</h4>
        <ul style={{ margin: '0', paddingLeft: '20px' }}>
          <li>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ</li>
          <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã</li>
          <li>–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑</li>
          <li>–ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç</li>
          <li>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
        </ul>
      </div>
    </div>
  );
};

export default AiogramBotManagementComponent;
