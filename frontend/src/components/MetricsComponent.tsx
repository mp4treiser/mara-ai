import React, { useState, useEffect } from 'react';
import { agentsAPI, UserMetrics, SystemMetrics, PerformanceMetrics } from '../api/agents';

const MetricsComponent = () => {
  const [myMetrics, setMyMetrics] = useState<UserMetrics | null>(null);
  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics | null>(null);
  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'my' | 'system' | 'performance'>('my');

  useEffect(() => {
    loadMetrics();
  }, []);

  const loadMetrics = async () => {
    try {
      setLoading(true);
      const [my, system, performance] = await Promise.all([
        agentsAPI.getMyMetrics(),
        agentsAPI.getSystemMetrics(),
        agentsAPI.getPerformanceMetrics()
      ]);
      setMyMetrics(my);
      setSystemMetrics(system);
      setPerformanceMetrics(performance);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫');
    } finally {
      setLoading(false);
    }
  };

  const formatNumber = (num: number) => {
    return new Intl.NumberFormat('ru-RU').format(num);
  };

  const formatTime = (seconds: number) => {
    return `${seconds.toFixed(2)}—Å`;
  };

  const formatPercentage = (num: number) => {
    return `${num.toFixed(1)}%`;
  };

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '40px' }}>
        <div style={{ fontSize: '18px', color: '#4a5568' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ 
        textAlign: 'center', 
        padding: '40px',
        background: '#fed7d7',
        color: '#c53030',
        borderRadius: '8px',
        border: '1px solid #feb2b2'
      }}>
        <div style={{ fontSize: '18px', marginBottom: '16px' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫</div>
        <div style={{ fontSize: '14px', marginBottom: '16px' }}>{error}</div>
        <button
          onClick={loadMetrics}
          style={{
            background: '#e53e3e',
            color: '#fff',
            border: 'none',
            borderRadius: '6px',
            padding: '8px 16px',
            fontSize: '14px',
            cursor: 'pointer'
          }}
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  const renderMyMetrics = () => {
    if (!myMetrics) return null;

    return (
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '20px' }}>
        <div style={{ 
          background: '#fff', 
          padding: '20px', 
          borderRadius: '12px', 
          boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#2d3748' }}>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div style={{ fontSize: '14px', color: '#4a5568', lineHeight: '1.6' }}>
            <div>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: <strong>{myMetrics.connected_agents}</strong></div>
            <div>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <strong>{formatNumber(myMetrics.total_requests)}</strong></div>
            <div>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <strong>{formatTime(myMetrics.avg_processing_time)}</strong></div>
          </div>
        </div>

        <div style={{ 
          background: '#fff', 
          padding: '20px', 
          borderRadius: '12px', 
          boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#2d3748' }}>ü§ñ –ü–æ –∞–≥–µ–Ω—Ç–∞–º</h4>
          {myMetrics.agent_breakdown.length > 0 ? (
            <div style={{ fontSize: '14px', color: '#4a5568' }}>
              {myMetrics.agent_breakdown.map((agent, index) => (
                <div key={index} style={{ 
                  padding: '8px 0', 
                  borderBottom: index < myMetrics.agent_breakdown.length - 1 ? '1px solid #e2e8f0' : 'none'
                }}>
                  <div>–ê–≥–µ–Ω—Ç {agent.agent_id}: {agent.requests} –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                  <div style={{ fontSize: '12px', color: '#718096' }}>
                    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {formatTime(agent.avg_processing_time)}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{ color: '#718096', fontSize: '14px' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–≥–µ–Ω—Ç–∞–º</div>
          )}
        </div>
      </div>
    );
  };

  const renderSystemMetrics = () => {
    if (!systemMetrics) return null;

    return (
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '20px' }}>
        <div style={{ 
          background: '#fff', 
          padding: '20px', 
          borderRadius: '12px', 
          boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#2d3748' }}>üåê –°–∏—Å—Ç–µ–º–∞</h4>
          <div style={{ fontSize: '14px', color: '#4a5568', lineHeight: '1.6' }}>
            <div>–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: <strong>{systemMetrics.total_agents}</strong></div>
            <div>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: <strong>{formatNumber(systemMetrics.active_connections)}</strong></div>
            <div>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <strong>{formatNumber(systemMetrics.total_requests)}</strong></div>
            <div>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: <strong>{formatNumber(systemMetrics.recent_requests_7d)}</strong></div>
          </div>
        </div>

        <div style={{ 
          background: '#fff', 
          padding: '20px', 
          borderRadius: '12px', 
          boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#2d3748' }}>üèÜ –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤</h4>
          {systemMetrics.top_agents.length > 0 ? (
            <div style={{ fontSize: '14px', color: '#4a5568' }}>
              {systemMetrics.top_agents.map((agent, index) => (
                <div key={index} style={{ 
                  padding: '8px 0', 
                  borderBottom: index < systemMetrics.top_agents.length - 1 ? '1px solid #e2e8f0' : 'none'
                }}>
                  <div>#{index + 1} –ê–≥–µ–Ω—Ç {agent.agent_id}: {agent.requests} –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                  <div style={{ fontSize: '12px', color: '#718096' }}>
                    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {formatTime(agent.avg_processing_time)}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{ color: '#718096', fontSize: '14px' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
          )}
        </div>
      </div>
    );
  };

  const renderPerformanceMetrics = () => {
    if (!performanceMetrics) return null;

    return (
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '20px' }}>
        <div style={{ 
          background: '#fff', 
          padding: '20px', 
          borderRadius: '12px', 
          boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#2d3748' }}>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4>
          <div style={{ fontSize: '14px', color: '#4a5568', lineHeight: '1.6' }}>
            <div>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <strong>{formatTime(performanceMetrics.avg_processing_time)}</strong></div>
            <div>–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: <strong>{formatTime(performanceMetrics.median_processing_time)}</strong></div>
            <div>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <strong>{formatNumber(performanceMetrics.total_requests)}</strong></div>
          </div>
        </div>

        <div style={{ 
          background: '#fff', 
          padding: '20px', 
          borderRadius: '12px', 
          boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#2d3748' }}>üö® –û—à–∏–±–∫–∏</h4>
          <div style={{ fontSize: '14px', color: '#4a5568', lineHeight: '1.6' }}>
            <div>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: <strong style={{ 
              color: performanceMetrics.error_rate_percent > 5 ? '#e53e3e' : '#38a169'
            }}>{formatPercentage(performanceMetrics.error_rate_percent)}</strong></div>
            <div>–ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <strong>{formatNumber(performanceMetrics.slow_requests)}</strong></div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div style={{ width: '100%', maxWidth: 1200, margin: '0 auto', padding: '0 20px' }}>
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        marginBottom: '32px',
        background: '#fff',
        borderRadius: '12px',
        padding: '8px',
        boxShadow: '0 2px 16px rgba(0,0,0,0.07)',
        maxWidth: '600px',
        margin: '0 auto 32px auto'
      }}>
        <button
          onClick={() => setActiveTab('my')}
          style={{
            background: activeTab === 'my' ? '#3182ce' : 'transparent',
            color: activeTab === 'my' ? '#fff' : '#4a5568',
            border: 'none',
            borderRadius: '8px',
            padding: '12px 24px',
            fontSize: '14px',
            fontWeight: '600',
            cursor: 'pointer',
            transition: 'all 0.2s',
            flex: 1,
            margin: '0 4px'
          }}
        >
          –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏
        </button>
        <button
          onClick={() => setActiveTab('system')}
          style={{
            background: activeTab === 'system' ? '#3182ce' : 'transparent',
            color: activeTab === 'system' ? '#fff' : '#4a5568',
            border: 'none',
            borderRadius: '8px',
            padding: '12px 24px',
            fontSize: '14px',
            fontWeight: '600',
            cursor: 'pointer',
            transition: 'all 0.2s',
            flex: 1,
            margin: '0 4px'
          }}
        >
          –°–∏—Å—Ç–µ–º–∞
        </button>
        <button
          onClick={() => setActiveTab('performance')}
          style={{
            background: activeTab === 'performance' ? '#3182ce' : 'transparent',
            color: activeTab === 'performance' ? '#fff' : '#4a5568',
            border: 'none',
            borderRadius: '8px',
            padding: '12px 24px',
            fontSize: '14px',
            fontWeight: '600',
            cursor: 'pointer',
            transition: 'all 0.2s',
            flex: 1,
            margin: '0 4px'
          }}
        >
          –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        </button>
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞ */}
      <div>
        {activeTab === 'my' && renderMyMetrics()}
        {activeTab === 'system' && renderSystemMetrics()}
        {activeTab === 'performance' && renderPerformanceMetrics()}
      </div>
    </div>
  );
};

export default MetricsComponent;
