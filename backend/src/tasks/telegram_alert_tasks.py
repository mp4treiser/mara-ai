import logging
import asyncio
import re
from typing import Dict, Any, List
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session
from src.core.orm.database import AsyncSessionLocal, SessionLocal
from src.agents.repositories.telegram_monitored_chat import TelegramMonitoredChatRepository
from src.agents.services.agent_service import AgentService
from src.agents.services.telegram_service import TelegramService, TelegramMessage
from src.core.celery_app import celery_app
from src.agents.models.telegram_monitored_chat import TelegramMonitoredChat
from src.agents.models.telegram_config import TelegramConfig
from src.agents.models.agent import Agent
from src.agents.services.vector_store import VectorStore
from src.agents.services.ollama_service import OllamaService
from src.core.config import settings
import requests

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
telegram_service = TelegramService()
agent_service = AgentService()


def _extract_alert_keywords(user_text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–ª–µ—Ä—Ç–∞"""
    keywords = []
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∏–∑ [Alerting] –±–ª–æ–∫–∞
    alerting_match = re.search(r'\[Alerting\](.+?)alert', user_text, re.IGNORECASE)
    if alerting_match:
        alert_name = alerting_match.group(1).strip()
        keywords.append(alert_name)
    
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∞–ª–µ—Ä—Ç–∞: {keywords}")
    return keywords


@celery_app.task(bind=True, name="telegram_alert_tasks.process_telegram_alert_task")
def process_telegram_alert_task(
    self, 
    monitored_chat_id: int, 
    message_data: Dict[str, Any], 
    chat_id: str
) -> Dict[str, Any]:
    """
    Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∏–∑ Telegram.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç.
    
    Args:
        monitored_chat_id: ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–∞
        message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
        chat_id: ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞
    """
    task_id = self.request.id
    logger.info(f"Starting Telegram alert processing task {task_id} for monitored chat {monitored_chat_id}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è Celery
        result = _process_telegram_alert_sync(
            monitored_chat_id, message_data, chat_id
        )
        
        logger.info(f"Telegram alert processing task {task_id} completed successfully")
        return result
        
    except Exception as e:
        logger.error(f"Error in Telegram alert processing task {task_id}: {e}")
        return {
            "task_id": task_id,
            "success": False,
            "error": str(e),
            "monitored_chat_id": monitored_chat_id
        }


def _process_telegram_alert_sync(
    monitored_chat_id: int, 
    message_data: Dict[str, Any], 
    chat_id: str
) -> Dict[str, Any]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è Celery"""
    with SessionLocal() as db:
        try:
            monitored_chat = db.query(TelegramMonitoredChat).filter(
                TelegramMonitoredChat.id == monitored_chat_id
            ).first()
            
            if not monitored_chat or not monitored_chat.is_active:
                logger.warning(f"Monitored chat {monitored_chat_id} not found or inactive")
                return {
                    "success": False,
                    "error": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            telegram_config = db.query(TelegramConfig).filter(
                TelegramConfig.id == monitored_chat.telegram_config_id
            ).first()
            
            if not telegram_config or not telegram_config.is_active:
                logger.warning(f"Telegram config not found or inactive for monitored chat {monitored_chat_id}")
                return {
                    "success": False,
                    "error": "Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = message_data.get("text", "")
            if not message_text.strip():
                logger.info(f"No text in message from chat {chat_id}")
                return {
                    "success": False,
                    "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞"
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            alert_context = f"""
            –ê–õ–ï–†–¢ –ò–ó TELEGRAM:
            –ß–∞—Ç: {monitored_chat.chat_title or chat_id}
            –¢–∏–ø —á–∞—Ç–∞: {monitored_chat.chat_type}
            –í—Ä–µ–º—è: {message_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message_data.get('from', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            
            –°–û–û–ë–©–ï–ù–ò–ï:
            {message_text}
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∞–ª–µ—Ä—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏.
            """.strip()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

                agent = db.query(Agent).filter(Agent.id == telegram_config.agent_id).first()
                
                if not agent:
                    analysis_text = "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                else:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    analysis_result = _analyze_with_agent_sync_simple(
                        telegram_config.agent_id,
                        telegram_config.user_id,
                        alert_context
                    )
                    
                    if analysis_result and analysis_result.get("response"):
                        analysis_text = analysis_result["response"]
                    else:
                        analysis_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ –ò–ò –∞–≥–µ–Ω—Ç–∞."
                    
            except Exception as e:
                logger.error(f"Error analyzing alert with agent: {e}")
                analysis_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò: {str(e)}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ò–ò
            response_message = f"""
            üö® <b>–ê–ù–ê–õ–ò–ó –ê–õ–ï–†–¢–ê</b>
            
            üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {monitored_chat.chat_title or chat_id}
            ‚è∞ <b>–í—Ä–µ–º—è:</b> {message_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {message_data.get('from', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            
            üìù <b>–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
            {message_text}
            
            ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –ò–ò:</b>
            {analysis_text}
            
            ---
            <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç mara-ai</i>
            """.strip()
            

            bot_token = telegram_config.bot_token
            target_chat_id = telegram_config.chat_id
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": target_chat_id,
                "text": response_message,
                "parse_mode": "HTML"
            }
            
            logger.info(f"Sending response to chat {target_chat_id}")
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"Alert analysis sent successfully to chat {target_chat_id}")
                logger.info(f"Message ID: {result.get('result', {}).get('message_id')}")
                
                return {
                    "success": True,
                    "message": "–ê–ª–µ—Ä—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    "monitored_chat_id": monitored_chat_id,
                    "source_chat_id": chat_id,
                    "target_chat_id": target_chat_id,
                    "telegram_message_id": result.get("result", {}).get("message_id")
                }
            else:
                error_text = response.text
                logger.error(f"Error sending alert analysis: {response.status_code} - {error_text}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code} - {error_text}"
                }
            
        except Exception as e:
            logger.error(f"Error in alert processing: {e}")
            return {
                "success": False,
                "error": str(e)
            }


def _analyze_with_agent_sync_simple(
    agent_id: int,
    user_id: int,
    text: str
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        vector_store = VectorStore()
        ollama_service = OllamaService()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–∞
        with SessionLocal() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞

            agent = db.query(Agent).filter(Agent.id == agent_id).first()
            
            if not agent:
                return {"response": "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
            logger.info(f"Searching vector database for agent {agent_id}, user {user_id}")
            similar_docs = vector_store.search_similar(
                user_id=user_id,
                agent_id=agent_id,
                query=text,
                n_results=3
            )
            
            logger.info(f"Found {len(similar_docs)} similar documents")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = ""
            if similar_docs:
                context = "\n\n".join([doc.get("text", "") for doc in similar_docs])
                logger.info(f"Context length: {len(context)} characters")
                logger.info(f"First document preview: {similar_docs[0].get('text', '')[:200]}...")
            else:
                logger.warning("No similar documents found")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
            logger.info("Generating response with LLM")
            logger.info(f"Context preview: {context[:500]}...")
            logger.info(f"User text: {text[:200]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞, –∫–∞–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
            response = ollama_service.generate_response(
                prompt=agent.prompt,
                context=context,
                user_text=text
            )
            
            logger.info(f"Generated response: {response[:100]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            from src.agents.models.agent_log import AgentLog
            agent_log = AgentLog(
                agent_id=agent_id,
                user_id=user_id,
                text_analyzed=text,
                response=response,
                processing_time=0.0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                text_length=len(text),
                documents_used=len(similar_docs)
            )
            db.add(agent_log)
            db.commit()
            
            return {"response": response}
            
    except Exception as e:
        logger.error(f"Error in agent analysis: {e}")
        return {"response": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}


async def _analyze_with_agent_sync(
    agent_id: int,
    user_id: int,
    text: str
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò –∞–≥–µ–Ω—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–∞
        async with AsyncSessionLocal() as async_db:
            analysis_result = await agent_service.analyze_text(
                agent_id=agent_id,
                user_id=user_id,
                text=text,
                db_session=async_db
            )
            return analysis_result
    except Exception as e:
        logger.error(f"Error in agent analysis: {e}")
        return {"response": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}


async def _analyze_with_agent(
    agent_id: int,
    user_id: int,
    text: str
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
    try:
        async with AsyncSessionLocal() as db:
            analysis_result = await agent_service.analyze_text(
                agent_id=agent_id,
                user_id=user_id,
                text=text,
                db_session=db
            )
            return analysis_result
    except Exception as e:
        logger.error(f"Error in agent analysis: {e}")
        return {"response": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}


async def _process_telegram_alert_async(
    monitored_chat_id: int, 
    message_data: Dict[str, Any], 
    chat_id: str
) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞"""
    async with AsyncSessionLocal() as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            monitoring_repo = TelegramMonitoredChatRepository(db)
            monitored_chat = await monitoring_repo.get_by_id(monitored_chat_id)
            
            if not monitored_chat or not monitored_chat.is_active:
                logger.warning(f"Monitored chat {monitored_chat_id} not found or inactive")
                return {
                    "success": False,
                    "error": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            telegram_config = monitored_chat.telegram_config
            if not telegram_config or not telegram_config.is_active:
                logger.warning(f"Telegram config not found or inactive for monitored chat {monitored_chat_id}")
                return {
                    "success": False,
                    "error": "Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = message_data.get("text", "")
            if not message_text.strip():
                logger.info(f"No text in message from chat {chat_id}")
                return {
                    "success": False,
                    "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞"
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            alert_context = f"""
            –ê–õ–ï–†–¢ –ò–ó TELEGRAM:
            –ß–∞—Ç: {monitored_chat.chat_title or chat_id}
            –¢–∏–ø —á–∞—Ç–∞: {monitored_chat.chat_type}
            –í—Ä–µ–º—è: {message_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message_data.get('from', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            
            –°–û–û–ë–©–ï–ù–ò–ï:
            {message_text}
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∞–ª–µ—Ä—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏.
            """.strip()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            try:
                analysis_result = await agent_service.analyze_text(
                    agent_id=telegram_config.agent_id,
                    user_id=telegram_config.user_id,
                    text=alert_context,
                    db_session=db
                )
                
                if not analysis_result or not analysis_result.get("response"):
                    logger.warning(f"No analysis result for alert from chat {chat_id}")
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç"
                    }
                
                analysis_text = analysis_result["response"]
                
            except Exception as e:
                logger.error(f"Error analyzing alert: {e}")
                analysis_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª–µ—Ä—Ç–∞: {str(e)}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_message = f"""
            üö® <b>–ê–ù–ê–õ–ò–ó –ê–õ–ï–†–¢–ê</b>
            
            üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {monitored_chat.chat_title or chat_id}
            ‚è∞ <b>–í—Ä–µ–º—è:</b> {message_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {message_data.get('from', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            
            üìù <b>–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
            {message_text}
            
            ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –ò–ò:</b>
            {analysis_text}
            
            ---
            <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç mara-ai</i>
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            try:
                message = TelegramMessage(
                    chat_id=telegram_config.chat_id,
                    text=response_message,
                    parse_mode="HTML"
                )
                
                result = await telegram_service.send_message(telegram_config.bot_token, message)
                
                logger.info(f"Alert analysis sent successfully to chat {telegram_config.chat_id}")
                
                return {
                    "success": True,
                    "message": "–ê–ª–µ—Ä—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    "monitored_chat_id": monitored_chat_id,
                    "source_chat_id": chat_id,
                    "target_chat_id": telegram_config.chat_id,
                    "telegram_message_id": result.get("result", {}).get("message_id"),
                    "analysis_length": len(analysis_text)
                }
                
            except Exception as e:
                logger.error(f"Error sending alert analysis: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                }
            
        except Exception as e:
            logger.error(f"Error in alert processing: {e}")
            return {
                "success": False,
                "error": str(e)
            }


@celery_app.task(bind=True, name="test_telegram_monitoring")
def test_telegram_monitoring_task(
    self, 
    monitored_chat_id: int, 
    test_message: str
) -> Dict[str, Any]:
    """
    Celery –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    Args:
        monitored_chat_id: ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–∞
        test_message: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    task_id = self.request.id
    logger.info(f"Starting Telegram monitoring test task {task_id}")
    
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            result = loop.run_until_complete(_test_telegram_monitoring_async(
                monitored_chat_id, test_message
            ))
        finally:
            loop.close()
        
        logger.info(f"Telegram monitoring test task {task_id} completed")
        return result
        
    except Exception as e:
        logger.error(f"Error in Telegram monitoring test task {task_id}: {e}")
        return {
            "task_id": task_id,
            "success": False,
            "error": str(e)
        }


async def _test_telegram_monitoring_async(
    monitored_chat_id: int, 
    test_message: str
) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    async with AsyncSessionLocal() as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            monitoring_repo = TelegramMonitoredChatRepository(db)
            monitored_chat = await monitoring_repo.get_by_id(monitored_chat_id)
            
            if not monitored_chat:
                return {
                    "success": False,
                    "error": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            telegram_config = monitored_chat.telegram_config
            if not telegram_config:
                return {
                    "success": False,
                    "error": "Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_response = f"""
            üß™ <b>–¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b>
            
            üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞:</b> {monitored_chat.chat_title or monitored_chat.chat_id}
            üîç <b>–¢–∏–ø —á–∞—Ç–∞:</b> {monitored_chat.chat_type}
            üè∑Ô∏è <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(monitored_chat.keywords) if monitored_chat.keywords else '–ù–µ –∑–∞–¥–∞–Ω—ã'}
            
            üìù <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
            {test_message}
            
            ‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
            
            ---
            <i>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç mara-ai</i>
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = TelegramMessage(
                chat_id=telegram_config.chat_id,
                text=test_response,
                parse_mode="HTML"
            )
            
            result = await telegram_service.send_message(telegram_config.bot_token, message)
            
            return {
                "success": True,
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "monitored_chat_id": monitored_chat_id,
                "telegram_message_id": result.get("result", {}).get("message_id")
            }
            
        except Exception as e:
            logger.error(f"Error in monitoring test: {e}")
            return {
                "success": False,
                "error": str(e)
            }
