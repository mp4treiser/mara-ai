import logging
import httpx
from typing import Optional, Dict, Any
from pydantic import BaseModel

logger = logging.getLogger(__name__)


class TelegramMessage(BaseModel):
    chat_id: str
    text: str
    parse_mode: str = "HTML"
    disable_web_page_preview: bool = False


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self):
        self.base_url = "https://api.telegram.org/bot"
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    async def send_message(self, bot_token: str, message: TelegramMessage) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Telegram API
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            url = f"{self.base_url}{bot_token}/sendMessage"
            
            payload = {
                "chat_id": message.chat_id,
                "text": message.text,
                "parse_mode": message.parse_mode,
                "disable_web_page_preview": message.disable_web_page_preview
            }
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(url, json=payload)
                response.raise_for_status()
                
                result = response.json()
                
                if result.get("ok"):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {message.chat_id}")
                    return result
                else:
                    error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {error_msg}")
                    raise Exception(f"Telegram API error: {error_msg}")
                    
        except httpx.HTTPStatusError as e:
            error_msg = f"HTTP error {e.response.status_code}: {e.response.text}"
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {error_msg}")
            raise Exception(error_msg)
            
        except httpx.RequestError as e:
            error_msg = f"Network error: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {error_msg}")
            raise Exception(error_msg)
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
            raise
    
    async def get_bot_info(self, bot_token: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        try:
            url = f"{self.base_url}{bot_token}/getMe"
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(url)
                response.raise_for_status()
                
                result = response.json()
                
                if result.get("ok"):
                    logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return result.get("result", {})
                else:
                    error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {error_msg}")
                    raise Exception(f"Telegram API error: {error_msg}")
                    
        except httpx.HTTPStatusError as e:
            error_msg = f"HTTP error {e.response.status_code}: {e.response.text}"
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {error_msg}")
            raise Exception(error_msg)
            
        except httpx.RequestError as e:
            error_msg = f"Network error: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {error_msg}")
            raise Exception(error_msg)
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {str(e)}")
            raise
    
    async def test_bot_connection(self, bot_token: str) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            await self.get_bot_info(bot_token)
            return True
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: {str(e)}")
            return False
    
    def format_agent_response(self, agent_name: str, query: str, response: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response: –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 3500  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if len(response) > max_length:
            response = response[:max_length] + "..."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
        formatted_message = f"""
ü§ñ <b>{agent_name}</b>

üìù <b>–ó–∞–ø—Ä–æ—Å:</b>
{query}

üí¨ <b>–û—Ç–≤–µ—Ç:</b>
{response}

---
<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ mara-ai</i>
        """.strip()
        
        return formatted_message
    
    def validate_bot_token(self, bot_token: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not bot_token:
            return False
        
        # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º
        if ':' not in bot_token or len(bot_token) < 20:
            return False
        
        # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º
        try:
            bot_id = bot_token.split(':')[0]
            int(bot_id)
            return True
        except (ValueError, IndexError):
            return False
    
    def validate_chat_id(self, chat_id: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ ID –≤–∞–ª–∏–¥–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not chat_id:
            return False
        
        # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ —Å –º–∏–Ω—É—Å–æ–º)
        if chat_id.replace('-', '').replace('_', '').isdigit():
            return True
        
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç @
        if chat_id.startswith('@') or '@' in chat_id:
            return True
        
        return False
    
    async def set_webhook(self, bot_token: str, webhook_url: str) -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            webhook_url: URL –¥–ª—è webhook
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        try:
            url = f"{self.base_url}{bot_token}/setWebhook"
            
            payload = {
                "url": webhook_url
            }
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(url, json=payload)
                response.raise_for_status()
                
                result = response.json()
                logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞: {webhook_url}")
                return result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            raise
    
    async def get_webhook_info(self, bot_token: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
        """
        try:
            url = f"{self.base_url}{bot_token}/getWebhookInfo"
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(url)
                response.raise_for_status()
                
                result = response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –¥–ª—è –±–æ—Ç–∞")
                return result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
            raise
    
    async def delete_webhook(self, bot_token: str) -> Dict[str, Any]:
        """
        –£–¥–∞–ª—è–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        try:
            url = f"{self.base_url}{bot_token}/deleteWebhook"
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(url)
                response.raise_for_status()
                
                result = response.json()
                logger.info(f"Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞")
                return result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
            raise
